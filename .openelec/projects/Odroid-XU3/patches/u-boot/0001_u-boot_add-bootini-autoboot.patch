diff -Nur a/common/cmd_fat.c.orig b/common/cmd_fat.c.orig
--- a/common/cmd_fat.c.orig	2015-10-19 19:59:38.000000000 -0400
+++ b/common/cmd_fat.c.orig	1969-12-31 19:00:00.000000000 -0500
@@ -1,152 +0,0 @@
-/*
- * (C) Copyright 2002
- * Richard Jones, rjones@nexus-tech.net
- *
- * SPDX-License-Identifier:	GPL-2.0+
- */
-
-/*
- * Boot support
- */
-#include <common.h>
-#include <command.h>
-#include <s_record.h>
-#include <net.h>
-#include <ata.h>
-#include <asm/io.h>
-#include <mapmem.h>
-#include <part.h>
-#include <fat.h>
-#include <fs.h>
-
-int do_fat_size(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
-{
-	return do_size(cmdtp, flag, argc, argv, FS_TYPE_FAT);
-}
-
-U_BOOT_CMD(
-	fatsize,	4,	0,	do_fat_size,
-	"determine a file's size",
-	"<interface> <dev[:part]> <filename>\n"
-	"    - Find file 'filename' from 'dev' on 'interface'\n"
-	"      and determine its size."
-);
-
-int do_fat_fsload (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
-{
-	return do_load(cmdtp, flag, argc, argv, FS_TYPE_FAT);
-}
-
-
-U_BOOT_CMD(
-	fatload,	7,	0,	do_fat_fsload,
-	"load binary file from a dos filesystem",
-	"<interface> [<dev[:part]> [<addr> [<filename> [bytes [pos]]]]]\n"
-	"    - Load binary file 'filename' from 'dev' on 'interface'\n"
-	"      to address 'addr' from dos filesystem.\n"
-	"      'pos' gives the file position to start loading from.\n"
-	"      If 'pos' is omitted, 0 is used. 'pos' requires 'bytes'.\n"
-	"      'bytes' gives the size to load. If 'bytes' is 0 or omitted,\n"
-	"      the load stops on end of file.\n"
-	"      If either 'pos' or 'bytes' are not aligned to\n"
-	"      ARCH_DMA_MINALIGN then a misaligned buffer warning will\n"
-	"      be printed and performance will suffer for the load."
-);
-
-static int do_fat_ls(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
-{
-	return do_ls(cmdtp, flag, argc, argv, FS_TYPE_FAT);
-}
-
-U_BOOT_CMD(
-	fatls,	4,	1,	do_fat_ls,
-	"list files in a directory (default /)",
-	"<interface> [<dev[:part]>] [directory]\n"
-	"    - list files from 'dev' on 'interface' in a 'directory'"
-);
-
-static int do_fat_fsinfo(cmd_tbl_t *cmdtp, int flag, int argc,
-			 char * const argv[])
-{
-	int dev, part;
-	block_dev_desc_t *dev_desc;
-	disk_partition_t info;
-
-	if (argc < 2) {
-		printf("usage: fatinfo <interface> [<dev[:part]>]\n");
-		return 0;
-	}
-
-	part = get_device_and_partition(argv[1], argv[2], &dev_desc, &info, 1);
-	if (part < 0)
-		return 1;
-
-	dev = dev_desc->dev;
-	if (fat_set_blk_dev(dev_desc, &info) != 0) {
-		printf("\n** Unable to use %s %d:%d for fatinfo **\n",
-			argv[1], dev, part);
-		return 1;
-	}
-	return file_fat_detectfs();
-}
-
-U_BOOT_CMD(
-	fatinfo,	3,	1,	do_fat_fsinfo,
-	"print information about filesystem",
-	"<interface> [<dev[:part]>]\n"
-	"    - print information about filesystem from 'dev' on 'interface'"
-);
-
-#ifdef CONFIG_FAT_WRITE
-static int do_fat_fswrite(cmd_tbl_t *cmdtp, int flag,
-		int argc, char * const argv[])
-{
-	loff_t size;
-	int ret;
-	unsigned long addr;
-	unsigned long count;
-	block_dev_desc_t *dev_desc = NULL;
-	disk_partition_t info;
-	int dev = 0;
-	int part = 1;
-	void *buf;
-
-	if (argc < 5)
-		return cmd_usage(cmdtp);
-
-	part = get_device_and_partition(argv[1], argv[2], &dev_desc, &info, 1);
-	if (part < 0)
-		return 1;
-
-	dev = dev_desc->dev;
-
-	if (fat_set_blk_dev(dev_desc, &info) != 0) {
-		printf("\n** Unable to use %s %d:%d for fatwrite **\n",
-			argv[1], dev, part);
-		return 1;
-	}
-	addr = simple_strtoul(argv[3], NULL, 16);
-	count = simple_strtoul(argv[5], NULL, 16);
-
-	buf = map_sysmem(addr, count);
-	ret = file_fat_write(argv[4], buf, 0, count, &size);
-	unmap_sysmem(buf);
-	if (ret < 0) {
-		printf("\n** Unable to write \"%s\" from %s %d:%d **\n",
-			argv[4], argv[1], dev, part);
-		return 1;
-	}
-
-	printf("%llu bytes written\n", size);
-
-	return 0;
-}
-
-U_BOOT_CMD(
-	fatwrite,	6,	0,	do_fat_fswrite,
-	"write file into a dos filesystem",
-	"<interface> <dev[:part]> <addr> <filename> <bytes>\n"
-	"    - write file 'filename' from the address 'addr' in RAM\n"
-	"      to 'dev' on 'interface'"
-);
-#endif
diff -Nur a/include/configs/odroid.h b/include/configs/odroid.h
--- a/include/configs/odroid.h	2015-10-19 19:59:38.000000000 -0400
+++ b/include/configs/odroid.h	2015-11-03 09:18:45.009021231 -0500
@@ -134,6 +134,7 @@
 	"boot_script=" \
 		"run loadbootscript;" \
 		"source ${scriptaddr}\0" \
+	"boot_ini=bootini\0" \
 	"boot_fit=" \
 		"setenv kerneladdr 0x42000000;" \
 		"setenv kernelname Image.itb;" \
@@ -165,6 +166,8 @@
 			"run boot_zimg;" \
 		"elif test -e mmc 0 uImage; then; " \
 			"run boot_uimg;" \
+		"elif test -e mmc 0 boot.ini; then; " \
+			"run boot_ini;" \
 		"fi;\0" \
 	"console=" CONFIG_DEFAULT_CONSOLE \
 	"mmcbootdev=0\0" \
diff -Nur a/include/configs/odroid_xu3.h b/include/configs/odroid_xu3.h
--- a/include/configs/odroid_xu3.h	2015-10-19 19:59:38.000000000 -0400
+++ b/include/configs/odroid_xu3.h	2015-11-03 09:11:00.656870873 -0500
@@ -1,3 +1,4 @@
+
 /*
  * Copyright (C) 2013 Samsung Electronics
  * Hyungwon Hwang <human.hwang@samsung.com>
@@ -25,6 +26,7 @@
 #define TZPC_BASE_OFFSET		0x10000
 
 #define CONFIG_CMD_MMC
+#define CONFIG_BOOTCOMMAND              "run autoboot"
 
 #define CONFIG_NR_DRAM_BANKS	8
 #define SDRAM_BANK_SIZE		(256UL << 20UL)	/* 256 MB */
@@ -123,6 +125,11 @@
 	EXYNOS_FDTFILE_SETTING \
 	MEM_LAYOUT_ENV_SETTINGS \
 	BOOTENV \
+	"boot_ini=bootini\0" \
+	"autoboot=" \
+		"if test -e mmc 0 boot.ini; then; " \
+			"run boot_ini;" \
+		"fi;\0" \
 	"bootdelay=0\0" \
 	"rootfstype=ext4\0" \
 	"console=" CONFIG_DEFAULT_CONSOLE \
